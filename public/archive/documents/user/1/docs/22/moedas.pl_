% Prolog poplog
% Problema das 12 moedas

moedas_falsa(M, MF).



% retorna para de uma lista

sub_array([X|_],1,1,[X]).

sub_array([X|Xs],1,K,[X|Ys]) :-
	K > 1,
	K1 is K - 1,
	sub_array(Xs,1,K1,Ys).

sub_array([_|Xs],I,K,Ys) :-
	I > 1,
	I1 is I - 1,
	K1 is K - 1,
	sub_array(Xs,I1,K1,Ys).


% Balança de Fiel 
% + = primeiro paramentro mais pesado
% - = segundo paramentro mais pesado
% = = dois paramentros iguais

balanca(L, L1, '+') :-
	soma(L, S),
	soma(L1,S1),
	S > S1,	
	write(' pesou '),nl.

balanca(L, L1, '-') :-
	soma(L, S),
	soma(L1,S1),
	S < S1,
	write(' pesou '),nl. 

balanca(L, L1, '=') :-
	soma(L, S),
	soma(L1,S1),
	S = S1,
	write(' pesou '),nl.

% Soma dos elementos de uma lista

soma([], 0).
soma([X|Y], S) :-
	soma(Y, L),!,
	S is L + X.

% Inicio

resolva(M, Pos, Pes) :-
	pese(M,1,4,5,8, '='),
	pesoigual(M, Pos, Pes),!.

resolva(M, Pos, Pes) :-
	pese(M,1,4,5,8, P),
	pesoDiferente(M, P, Pos, Pes),!.

% Quando a primeira pesagem é diferente

pesoDiferente(M, P, Pos, Pes) :-
	P = '+',	
	peseAlternado(M, '='),
	verifica(M,5,6,'-', Pos, Pes).
	
pesoDiferente(M, P, Pos, Pes) :-
	P = '-',	
	peseAlternado(M, '='),
	verifica(M,5,6,'+', Pos, Pes).

pesoDiferente(M, P, Pos, Pes) :-
	peseAlternado(M, P),
	verifica(M,1,2,P, Pos, Pes).

pesoDiferente(M, P, 4, P) :-
	pese(M,8,8,1,1, '=').

pesoDiferente(M, P, 8, Pe) :-
	pese(M,8,8,1,1, Pe).	


% Auxilia quando a primeira pesagem é igual

verifica(M, P1, P2, P, Pos, P) :-
	pese(M,P1,P1, P2,P2, '='),
	Pos is P2+1.
	
verifica(M, P1, P2, P, Pos, P) :-
	pese(M, P1, P1, P2, P2, P),
	Pos is P1.

verifica(M, P1, P2, P, P2, P).

% Auxilia quando a primeira pesagem é igual

peseAlternado(M, R) :-
	sub_array(M,1,3, S1),	
	sub_array(M,8,8, S2),
	concatena(S1, S2, L1),	
	sub_array(M,9,11, S3),	
	sub_array(M,4,4, S4),
	concatena(S3, S4, L2),
	balanca(L1, L2, R).

% Quando a primeira pesagem é igual

pesoigual(M, 12, Pes) :-
	pese(M,9,11,1,3,'='),
	pese(M,12,12,1,1,Pes).

pesoigual(M, 9, Pes):-	
	pese(M,10,10,11,11,'='),
	pese(M,9,11,1,3,Pes).

pesoigual(M, 11, Pes) :-
	pese(M,9,9,10,10,'='),
	pese(M,9,11,1,3,Pes).

pesoigual(M, 10, Pes):-	
	pese(M,10,10,1,1,Pes).


% Pesa
	
pese(M, P1, P2, P3, P4, R) :-
	sub_array(M,P1,P2,Su1),
	sub_array(M,P3,P4,Su2),
	balanca(Su1,Su2,R).

% concatena lista
 concatena([],L,L).
 concatena([X|Y], L2, [X|L3]):-
        concatena(Y,L2,L3).
	
